{"data":{"site":{"siteMetadata":{"title":"HLipinski devlog","author":"Hubert Lipinski"}},"markdownRemark":{"id":"ac301194-9e7e-5a16-a8e2-735aecebd31e","excerpt":"Hoisting jest mechanizmem języka JavaScript polegającym na traktowaniu każdej zmiennej zadeklarowanej słowem kluczowym  tak, jakby była zadeklarowana na…","html":"<p><strong>Hoisting</strong> jest mechanizmem języka <em>JavaScript</em> polegającym na traktowaniu każdej zmiennej zadeklarowanej słowem kluczowym <code class=\"language-text\">var</code> tak, jakby była zadeklarowana na początku danego bloku kodu (lub funkcji).</p>\n<p>Przykład:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>hoistTest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nhoistTest <span class=\"token operator\">=</span> <span class=\"token string\">\"Hoisting test\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Powyższy kod wygeneruje nam błąd <code class=\"language-text\">ReferenceError: hoistTest is not defined</code>, co jest spodziewanym zachowaniem: zmienna <code class=\"language-text\">hoistTest</code> nie istnieje w momencie logowania na konsolę.</p>\n<p>Sytuacja zmieni się, jeśli na końcu dodamy deklarację zmiennej:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>hoistTest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nhoistTest <span class=\"token operator\">=</span> <span class=\"token string\">\"Hoisting test\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> hoistTest<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Nie dostaniemy już błędu. Teraz po wywołaniu tych linii kodu na konsolę zostanie wypisany <code class=\"language-text\">undefined</code>, czyli zmienna istnieje, tylko nie została przypisana jej żadna wartość.\nDzieje się tak właśnie za sprawą <strong>hoistingu</strong>. W rzeczywistości, kod który został wykonany w przeglądarce wygląda następująco:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> hoistTest<span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>hoistTest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nhoistTest <span class=\"token operator\">=</span> <span class=\"token string\">\"Hoisting test\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Czyli silnik języka w momencie kompilacji “przeniósł” deklarację zmiennych słowem kluczowym <code class=\"language-text\">var</code> na początek bloku kodu.\nWarto zwrócić uwagę, że hositing działa tylko na <strong>deklarację zmiennych</strong>, nie ich inicjalizację, dlatego kod:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>hoistTest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> hoistTest <span class=\"token operator\">=</span> <span class=\"token string\">\"Hoisting test\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>nadal wypisze na konsoli <code class=\"language-text\">undefined</code> i po skompilowaniu będzie wyglądał, jak w bloku kodu powyżej.</p>\n<p>Mechanizm ten nie jest zbyt intuicyjny, szczególnie jeśli działa w dużych skupiskach linii kodu, przez co generuje błędy i niejasności.</p>\n<p>Co możemy z tym zrobić?</p>\n<ul>\n<li>Deklarować zmienne na początku bloku kodu (lub funkcji).</li>\n<li>Używać <a href=\"https://www.w3schools.com/js/js_strict.asp\">strict mode</a>, dzięki któremu silnik JS nie pozwoli używać zmiennych przed ich deklaracją.</li>\n<li>Zamiast <code class=\"language-text\">var</code> używać <code class=\"language-text\">let</code> i <code class=\"language-text\">const</code> z <em>ECMAScript 6</em>, które nie są poddawane mechanizmowi hoistingu i domyślnie działają tak, jak ich poprzednik w <em>strict mode</em> z poprzedniego punktu.</li>\n</ul>","frontmatter":{"title":"Czym jest hoisting?","date":"03-06-2019"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/hoisting/","previous":{"fields":{"slug":"/dekorator/"},"frontmatter":{"title":"Wzorzec Dekorator"}},"next":{"fields":{"slug":"/git-toolbox/index_en/"},"frontmatter":{"title":"Git toolbox"}}}}