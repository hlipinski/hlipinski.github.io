{"data":{"site":{"siteMetadata":{"title":"HLipinski devlog","author":"Hubert Lipinski"}},"markdownRemark":{"id":"f90939ff-308d-5ddc-9617-9358a74e85e9","excerpt":"Java language gives us two ways to check whether objects are equal. We can use either  operator or  method. operator:if used for primitive types compares its…","html":"<p>Java language gives us two ways to check whether objects are equal. We can use either <code class=\"language-text\">==</code> operator or <code class=\"language-text\">equals()</code> method.</p>\n<p><code class=\"language-text\">==</code> operator:</p>\n<ul>\n<li>if used for primitive types compares its values,</li>\n<li>if used for objects compares its references (so no two objects are equal).</li>\n</ul>\n<p><code class=\"language-text\">equals()</code> method:</p>\n<ul>\n<li>if not overridden (default implementation is form <code class=\"language-text\">Object</code> class) works like <code class=\"language-text\">==</code> operator (compares objects references),</li>\n<li>if overridden - it depends…</li>\n</ul>\n<h4>Problem</h4>\n<p>We want to treat two objects as equal by some of it’s attributes, for example:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">BigDecimal</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">BigDecimal</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>To achieve this, we need to override <code class=\"language-text\">equals()</code> method for its class.\nDoing this properly is not trivial task and lot of things may go wrong.</p>\n<h4>Theory</h4>\n<p>In most cases, default equality behaviour is fine and reasonable.\nOverriding <code class=\"language-text\">equals()</code> makes sense in objects which represents data structures, because we may want to compare them by its properties.</p>\n<p>Properly overridden <code class=\"language-text\">equals()</code> method should fulfill contract:</p>\n<ul>\n<li>reflexivity: <code class=\"language-text\">x.equals(x) == true</code>,</li>\n<li>symmetry: <code class=\"language-text\">x.equals(y) == y.equals(x)</code>,</li>\n<li>transitivity: if <code class=\"language-text\">x.equals(y) == true</code> and <code class=\"language-text\">y.equals(z) == true</code> then <code class=\"language-text\">x.equals(z) == true</code>,</li>\n<li>consistency: if two object are equals, they should remain equal unless they’re modified,</li>\n<li>non-nullity: <code class=\"language-text\">x.equals(null) == false</code>.</li>\n</ul>\n<h4>Solution</h4>\n<p>For comparing objects only among same class, this is a good starting point:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>o <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Shape</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">Shape</span> shape <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Shape</span><span class=\"token punctuation\">)</span> o<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// checking whether objects are equal by its properties</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In this example <code class=\"language-text\">instanceof</code> check:</p>\n<ul>\n<li>fulfills non-nullity criteria,</li>\n<li>protects code from <em>NullPointerException</em>,</li>\n<li>assures, that only desired objects will be compared together.</li>\n</ul>\n<p>Problem occurs when we want to assure equality between objects among class hierarchy.\nSuppose there is a <em>Shape</em> class with <em>color</em> attribute:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Shape</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> color<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token class-name\">Shape</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> color<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> color<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>obj <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Shape</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">Shape</span> shape <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Shape</span><span class=\"token punctuation\">)</span> obj<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>shape<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>There is also a <code class=\"language-text\">Rectange</code> class which is a <code class=\"language-text\">Shape</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Rectangle</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Shape</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> width<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> length<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token class-name\">Rectangle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> color<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> width<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> width<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">=</span> length<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token annotation punctuation\">@Override</span>\n    \t<span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    \t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>obj <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Rectangle</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    \t\t<span class=\"token class-name\">Rectangle</span> rectangle <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Rectangle</span><span class=\"token punctuation\">)</span> obj<span class=\"token punctuation\">;</span>\n    \t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>rectangle<span class=\"token punctuation\">)</span>\n    \t\t\t\t<span class=\"token operator\">&amp;&amp;</span> rectangle<span class=\"token punctuation\">.</span>width <span class=\"token operator\">==</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>width\n    \t\t\t\t<span class=\"token operator\">&amp;&amp;</span> rectangle<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n    \t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">equals()</code> implementation in <em>Rectangle</em> class breaks contract because of lack of symmetry:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Shape</span> x <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Shape</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"black\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Rectangle</span> y <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Rectangle</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"black\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// x.equals(y) == true</span>\n<span class=\"token comment\">// y.equals(x) == false</span></code></pre></div>\n<p>To fix this, <code class=\"language-text\">equals()</code> method in <em>Rectangle</em> class can be changed like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>obj <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Shape</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Rectangle</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">Rectangle</span> rectangle <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Rectangle</span><span class=\"token punctuation\">)</span> obj<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>rectangle<span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token operator\">&amp;&amp;</span> rectangle<span class=\"token punctuation\">.</span>width <span class=\"token operator\">==</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>width\n\t\t\t\t<span class=\"token operator\">&amp;&amp;</span> rectangle<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now, this code breaks contract because of lack of transitivity:</p>","frontmatter":{"title":"Equals method overriding","date":"10-07-2019"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/equals/","previous":{"fields":{"slug":"/obserwator/"},"frontmatter":{"title":"Wzorzec Obserwator"}},"next":null}}